version: 2.1
orbs: # adds orbs to your configuration
  jira: circleci/jira@1.3.1 # invokes the Jira orb, making its commands accessible
  slack: circleci/slack@4.3.0

jobs:
  
  build_and_test:
    docker:
      - image: cimg/node:13.11.0
    steps:
      - add_ssh_keys:
          fingerprints: 
          - "fd:01:3a:a5:75:2c:c4:ed:0d:e2:20:86:19:17:8f:c4" #additional key
          # - "8b:af:af:73:21:2e:2a:7f:b3:73:74:a9:5f:c0:f6:41" #deployment key
      - run:
          name: SSH Disable Host Key Checking
          command: |
            echo "StrictHostKeyChecking=no">> ~/.ssh/config        
      - checkout
      - run:
          command: |
            if [ ! -f "package.json" ]; then
              echo
              echo "---"
              echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
              echo "---"
              echo
              echo "Current directory: $(pwd)"
              echo
              echo
              echo "List directory: "
              echo
              ls
              exit 1
            fi
          name: Checking for package.json.
          working_directory: ~/project
      - restore_cache:
          keys:
          - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
      - run:
          command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
          name: Installing NPM packages
          working_directory: ~/project
      - save_cache:
          key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
          paths:
          - ~/.npm
      - run:
          command: npm run test
          name: Run NPM Tests
          working_directory: ~/project
      - run:
          name: DEV
          command: export NODE_ENV=development
      - run:
          name: Installing NPM packages
          command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
          working_directory: ~/project
  

  deploy-job-dev:
  # ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<<- EOF
            # ssh wpilimon@ezscriptrx.com@ftp-5029.luxsci.com 'bash -c CURRDATE=$(date +%s);echo \$CURRDATE; ls/ && \
            # ssh -p 122 -oUser='wpilimon@ezscriptrx.com' ftp-5029.luxsci.com 'bash -c 22rh825#;ls'

    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints: 
          - "fd:01:3a:a5:75:2c:c4:ed:0d:e2:20:86:19:17:8f:c4" #additional key 
      - run:
          name: Update known hosts
          command: ssh-keyscan -H ftp-5029.luxsci.com  >> ~/.ssh/known_hosts
      - run:
          name: Deploy
          command: |-
            ssh -p122 wpilimon@ezscriptrx.com@ftp-5029.luxsci.com && 22rh825# \
              bash -c 'ls && \
              /dev/null &'
  deploy-job-demo:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints: 
          - "a5:4b:c1:6b:25:88:e8:b8:98:60:a5:cb:99:41:00:b1" #additional key
      - checkout    
      - run:
          name: Deploy
          command: |-
            ssh $SSH_USER@$SSH_HOST_STG 'bash -c CURRDATE=$(date +%s);echo \$CURRDATE; cd circleci-test/ && \
              git checkout main && \
              git pull'

workflows:
  build-and-deploy:
    jobs:
      - build_and_test:
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development
          filters:
            branches:
              only: 
                - main #Branch que elegimos para testear devv

      - approve-dev-deployment:
          type: approval
          filters:
            branches:
              only:
                - main
      # - slack/on-hold:
      #     channel: '@development'
      #     requires:
      #       - approve-dev-deployment
      - deploy-job-dev:
          name: Deploy to Dev
          post-steps:
            - jira/notify:
                environment_type: development
                job_type: deployment
          requires:
            - approve-dev-deployment

      # - deploy-job-dev:
      #     name: Deploy to Development
      #     post-steps:
      #       - jira/notify:
      #           job_type: deployment
      #           environment_type: development
      #     requires:
      #       - build_and_test
      #     filters:
      #       branches:
      #         only: main #Branch que elegimos para deployar en dev dev

      - approve-demo-deploy: 
          type: approval # Es necesario aprobar el deploy a staging desde github
          filters:
            tags:
              only: /v\d+\.\d+\.\d+/
            branches:
              ignore: /.*/              

      - deploy-job-demo:
          name: Deploy to QA
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: deployment      
          requires:
            - approve-demo-deploy
          filters:
            branches:
              only: main #Branch que elegimos para deployar en staging